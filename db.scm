
(define-module (ikanren db)
  #:use-module (dbi dbi)
  #:use-module (srfi srfi-1)
  #:use-module (ikanren goals)
  #:export (define-dbrel fact!))
(define connection-string  "kanren:1415:kanren:socket:/var/run/postgresql")
(define (db-connect)
    (dbi-open "postgresql" connection-string))
(define (get-all-rows db-obj)
    (let ((row (dbi-get_row db-obj)))
        (if (not row) '() (cons row (get-all-rows db-obj)))))
(define (col-names tname)
    (let* ((db-obj (db-connect))
           (x (dbi-query db-obj (string-append "select column_name from information_schema.columns where table_name = '" tname "';")))
           (rows (get-all-rows db-obj)))
        (map cdar rows)))
(define (add-command name params)
    (let ((p (string-drop-right (apply string-append (map (lambda (param) (string-append "'" param "', ")) params)) 2))
          (n (string-drop-right (apply string-append (map (lambda (param) (string-append  param ", ")) (col-names name))) 2)))
    (string-append "insert into " name " ( " n " ) values ( " p "); ")))

(define-syntax fact!
    (syntax-rules ()
        ((_ (name param ...))
         (let ((db-obj (db-connect)))
             (dbi-query db-obj (add-command (symbol->string 'name) (list (object->string param) ...)))))))

(define-syntax define-dbrel
    (syntax-rules ()
        ((_ (name param ...) fact ...)
         (begin
             (let* ((db-obj (db-connect))
                   (x (dbi-query db-obj (string-append "create table " (symbol->string 'name) " ( "
                                                  (string-drop-right (string-append (string-append (symbol->string 'param) " varchar (64), ") ...) 2)
                                                  " );")))
                   (x (dbi-query db-obj (string-append "delete from " (symbol->string 'name) "; ")))
                   (x (dbi-query db-obj (string-append (add-command (symbol->string 'name) (map object->string 'fact)) ...))))
                 db-obj)
             (define name
                 (lambda (param ...)
                     (let* ((db-obj (db-connect))
                            (x (dbi-query db-obj (string-append "select * from " (symbol->string 'name)))))
                         (relate (lambda ()
                                     (define nname (lambda (param ...)
                                                       (relate (lambda ()
                                                                   (let ((row (dbi-get_row db-obj)))
                                                                       (if (not row) (begin (dbi-close db-obj) (contradiction))
                                                                           (disj (fold conj (tautology) (map == (list param ...) (map (lambda (x) (read (open-input-string (cdr x)))) row)))
                                                                                 (nname param ...)))))
                                                               '(name param ...))))
                                     (let ((row (dbi-get_row db-obj)))
                                         (if (not row) (contradiction)
                                             (disj (fold conj (tautology) (map == (list param ...) (map (lambda (x) (read (open-input-string (cdr x)))) row)))
                                                   (nname param ...)))))
                                 '(name param ...)))))))))

